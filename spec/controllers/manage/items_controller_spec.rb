# coding: utf-8

require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe Manage::ItemsController do

  # This should return the minimal set of attributes required to create a valid
  # Manage::Item. As you add validations to Manage::Item, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { "no" => "1" } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # Manage::ItemsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  before(:all) do
    FactoryGirl.create(:item)
  end

  # describe "GET index" do
  #   it "assigns all manage_items as @manage_items" do
  #     item = Manage::Item.create! valid_attributes
  #     get :index, {}, valid_session
  #     assigns(:manage_items).should eq([item])
  #   end
  # end

  describe "GET index" do
    # let(:item) { FactoryGirl.create(:item) }

    context '各ページから遷移して来た場合' do
      before do
        get :index
        puts "aaa"
      end
      it '正常にアクセスできること' do
        response.should be_success
      end
      it 'データが１件取得できること' do
        assigns(:items).should have(1).item
      end
    end
  end

  # describe "GET show" do
  #   it "assigns the requested manage_item as @manage_item" do
  #     item = Manage::Item.create! valid_attributes
  #     get :show, {:id => item.to_param}, valid_session
  #     assigns(:manage_item).should eq(item)
  #   end
  # end

  # describe "GET show" do
  #   context '商品詳細を表示する場合' do
  #     before do
  #       get :show
  #     end
  #     it '正常にアクセスできること' do
  #       # response.should be_success
  #       # item = Item.create! valid_attributes
  #       # get :show, {:id => item.to_param}, valid_session
  #       # assigns(:items).should eq([item])
  #       assigns(:items).should have(1).item
  #     end
  #   end
  # end

  # describe "GET new" do
  #   it "商品が追加された場合" do
  #     get :new, {}, valid_session
  #     assigns(:manage_item).should be_a_new(Manage::Item)
  #   end
  # end

  # describe "GET new" do
  #   context '商品が追加された場合' do
  #     before do
  #       get :new
  #     end

  #   it "商品が追加された場合" do
  #     get :new, {}, valid_session
  #     assigns(:manage_item).should be_a_new(Manage::Item)
  #   end
  # end

  # describe "GET edit" do
  #   it "assigns the requested manage_item as @manage_item" do
  #     item = Manage::Item.create! valid_attributes
  #     get :edit, {:id => item.to_param}, valid_session
  #     assigns(:manage_item).should eq(item)
  #   end
  # end

  # describe "POST create" do
  #   describe "with valid params" do
  #     it "creates a new Manage::Item" do
  #       expect {
  #         post :create, {:manage_item => valid_attributes}, valid_session
  #       }.to change(Manage::Item, :count).by(1)
  #     end

  #     it "assigns a newly created manage_item as @manage_item" do
  #       post :create, {:manage_item => valid_attributes}, valid_session
  #       assigns(:manage_item).should be_a(Manage::Item)
  #       assigns(:manage_item).should be_persisted
  #     end

  #     it "redirects to the created manage_item" do
  #       post :create, {:manage_item => valid_attributes}, valid_session
  #       response.should redirect_to(Manage::Item.last)
  #     end
  #   end

  #   describe "with invalid params" do
  #     it "assigns a newly created but unsaved manage_item as @manage_item" do
  #       # Trigger the behavior that occurs when invalid params are submitted
  #       Manage::Item.any_instance.stub(:save).and_return(false)
  #       post :create, {:manage_item => { "no" => "invalid value" }}, valid_session
  #       assigns(:manage_item).should be_a_new(Manage::Item)
  #     end

  #     it "re-renders the 'new' template" do
  #       # Trigger the behavior that occurs when invalid params are submitted
  #       Manage::Item.any_instance.stub(:save).and_return(false)
  #       post :create, {:manage_item => { "no" => "invalid value" }}, valid_session
  #       response.should render_template("new")
  #     end
  #   end
  # end

  # describe "PUT update" do
  #   describe "with valid params" do
  #     it "updates the requested manage_item" do
  #       item = Manage::Item.create! valid_attributes
  #       # Assuming there are no other manage_items in the database, this
  #       # specifies that the Manage::Item created on the previous line
  #       # receives the :update_attributes message with whatever params are
  #       # submitted in the request.
  #       Manage::Item.any_instance.should_receive(:update_attributes).with({ "no" => "1" })
  #       put :update, {:id => item.to_param, :manage_item => { "no" => "1" }}, valid_session
  #     end

  #     it "assigns the requested manage_item as @manage_item" do
  #       item = Manage::Item.create! valid_attributes
  #       put :update, {:id => item.to_param, :manage_item => valid_attributes}, valid_session
  #       assigns(:manage_item).should eq(item)
  #     end

  #     it "redirects to the manage_item" do
  #       item = Manage::Item.create! valid_attributes
  #       put :update, {:id => item.to_param, :manage_item => valid_attributes}, valid_session
  #       response.should redirect_to(item)
  #     end
  #   end

  #   describe "with invalid params" do
  #     it "assigns the manage_item as @manage_item" do
  #       item = Manage::Item.create! valid_attributes
  #       # Trigger the behavior that occurs when invalid params are submitted
  #       Manage::Item.any_instance.stub(:save).and_return(false)
  #       put :update, {:id => item.to_param, :manage_item => { "no" => "invalid value" }}, valid_session
  #       assigns(:manage_item).should eq(item)
  #     end

  #     it "re-renders the 'edit' template" do
  #       item = Manage::Item.create! valid_attributes
  #       # Trigger the behavior that occurs when invalid params are submitted
  #       Manage::Item.any_instance.stub(:save).and_return(false)
  #       put :update, {:id => item.to_param, :manage_item => { "no" => "invalid value" }}, valid_session
  #       response.should render_template("edit")
  #     end
  #   end
  # end

  # describe "DELETE destroy" do
  #   it "destroys the requested manage_item" do
  #     item = Manage::Item.create! valid_attributes
  #     expect {
  #       delete :destroy, {:id => item.to_param}, valid_session
  #     }.to change(Manage::Item, :count).by(-1)
  #   end

  #   it "redirects to the manage_items list" do
  #     item = Manage::Item.create! valid_attributes
  #     delete :destroy, {:id => item.to_param}, valid_session
  #     response.should redirect_to(manage_items_url)
  #   end
  # end
end

